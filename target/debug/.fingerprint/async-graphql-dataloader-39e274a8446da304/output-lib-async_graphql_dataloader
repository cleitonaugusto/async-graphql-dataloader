{"$message_type":"diagnostic","message":"unexpected `cfg` condition value: `async-graphql`","code":{"code":"unexpected_cfgs","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":285,"byte_end":310,"line_start":15,"line_end":15,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"#[cfg(feature = \"async-graphql\")]","highlight_start":7,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"no expected values for `feature`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding `async-graphql` as a feature in `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unexpected_cfgs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the condition","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":285,"byte_end":310,"line_start":15,"line_end":15,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"#[cfg(feature = \"async-graphql\")]","highlight_start":7,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unexpected `cfg` condition value: `async-graphql`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:15:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(feature = \"async-graphql\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove the condition\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: no expected values for `feature`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding `async-graphql` as a feature in `Cargo.toml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unexpected_cfgs)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type parameter `E` is never used","code":{"code":"E0091","explanation":"An unnecessary type parameter was given in a type alias.\n\nErroneous code example:\n\n```compile_fail,E0091\ntype Foo<T> = u32; // error: type parameter `T` is never used\n// or:\ntype Foo<A, B> = Box<A>; // error: type parameter `B` is never used\n```\n\nPlease check you didn't write too many parameters. Example:\n\n```\ntype Foo = u32; // ok!\ntype Foo2<A> = Box<A>; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/batcher.rs","byte_start":231,"byte_end":232,"line_start":8,"line_end":8,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"type BatchResult<V, E> = oneshot::Sender<Result<V, DataLoaderError>>;","highlight_start":21,"highlight_end":22}],"label":"unused type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing `E` or referring to it in the body of the type alias","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you intended `E` to be a const parameter, use `const E: /* Type */` instead","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0091]\u001b[0m\u001b[0m\u001b[1m: type parameter `E` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/batcher.rs:8:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtype BatchResult<V, E> = oneshot::Sender<Result<V, DataLoaderError>>;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munused type parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing `E` or referring to it in the body of the type alias\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you intended `E` to be a const parameter, use `const E: /* Type */` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type parameter `E` is never used","code":{"code":"E0091","explanation":"An unnecessary type parameter was given in a type alias.\n\nErroneous code example:\n\n```compile_fail,E0091\ntype Foo<T> = u32; // error: type parameter `T` is never used\n// or:\ntype Foo<A, B> = Box<A>; // error: type parameter `B` is never used\n```\n\nPlease check you didn't write too many parameters. Example:\n\n```\ntype Foo = u32; // ok!\ntype Foo2<A> = Box<A>; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/batcher.rs","byte_start":305,"byte_end":306,"line_start":9,"line_end":9,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"type PendingBatch<K, V, E> = HashMap<K, Vec<BatchResult<V, E>>>;","highlight_start":25,"highlight_end":26}],"label":"unused type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing `E` or referring to it in the body of the type alias","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you intended `E` to be a const parameter, use `const E: /* Type */` instead","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0091]\u001b[0m\u001b[0m\u001b[1m: type parameter `E` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/batcher.rs:9:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mtype PendingBatch<K, V, E> = HashMap<K, Vec<BatchResult<V, E>>>;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munused type parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider removing `E` or referring to it in the body of the type alias\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you intended `E` to be a const parameter, use `const E: /* Type */` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `to_string` exists for reference `&<L as BatchLoad>::Error`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/batcher.rs","byte_start":4877,"byte_end":4886,"line_start":158,"line_end":158,"column_start":71,"column_end":80,"is_primary":true,"text":[{"text":"                Some(Err(err)) => Err(DataLoaderError::BatchError(err.to_string())),","highlight_start":71,"highlight_end":80}],"label":"method cannot be called on `&<L as BatchLoad>::Error` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`<L as BatchLoad>::Error: std::fmt::Display`\nwhich is required by `<L as BatchLoad>::Error: ToString`\n`&<L as BatchLoad>::Error: std::fmt::Display`\nwhich is required by `&<L as BatchLoad>::Error: ToString`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `to_string` exists for reference `&<L as BatchLoad>::Error`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/batcher.rs:158:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Some(Err(err)) => Err(DataLoaderError::BatchError(err.to_string())),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `&<L as BatchLoad>::Error` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `<L as BatchLoad>::Error: std::fmt::Display`\u001b[0m\n\u001b[0m            which is required by `<L as BatchLoad>::Error: ToString`\u001b[0m\n\u001b[0m            `&<L as BatchLoad>::Error: std::fmt::Display`\u001b[0m\n\u001b[0m            which is required by `&<L as BatchLoad>::Error: ToString`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the parameter type `L` may not live long enough","code":{"code":"E0310","explanation":"A parameter type is missing a lifetime constraint or has a lifetime that\ndoes not live long enough.\n\nErroneous code example:\n\n```compile_fail,E0310\n// This won't compile because T is not constrained to the static lifetime\n// the reference needs\nstruct Foo<T> {\n    foo: &'static T\n}\n```\n\nType parameters in type definitions have lifetimes associated with them that\nrepresent how long the data stored within them is guaranteed to live. This\nlifetime must be as long as the data needs to be alive, and missing the\nconstraint that denotes this will cause this error.\n\nThis will compile, because it has the constraint on the type parameter:\n\n```\nstruct Foo<T: 'static> {\n    foo: &'static T\n}\n```\n"},"level":"error","spans":[{"file_name":"src/batcher.rs","byte_start":2866,"byte_end":3015,"line_start":102,"line_end":105,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"            tokio::spawn(async move {","highlight_start":13,"highlight_end":38},{"text":"                sleep(batcher.delay).await;","highlight_start":1,"highlight_end":44},{"text":"                batcher.dispatch_batch_for_key(key_clone).await;","highlight_start":1,"highlight_end":65},{"text":"            });","highlight_start":1,"highlight_end":15}],"label":"the parameter type `L` must be valid for the static lifetime...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/batcher.rs","byte_start":2866,"byte_end":3015,"line_start":102,"line_end":105,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"            tokio::spawn(async move {","highlight_start":13,"highlight_end":38},{"text":"                sleep(batcher.delay).await;","highlight_start":1,"highlight_end":44},{"text":"                batcher.dispatch_batch_for_key(key_clone).await;","highlight_start":1,"highlight_end":65},{"text":"            });","highlight_start":1,"highlight_end":15}],"label":"...so that the type `L` will meet its required lifetime bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider adding an explicit lifetime bound","code":null,"level":"help","spans":[{"file_name":"src/batcher.rs","byte_start":1590,"byte_end":1590,"line_start":57,"line_end":57,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"    L: BatchLoad,","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":" + 'static","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0310]\u001b[0m\u001b[0m\u001b[1m: the parameter type `L` may not live long enough\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/batcher.rs:102:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            tokio::spawn(async move {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                sleep(batcher.delay).await;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                batcher.dispatch_batch_for_key(key_clone).await;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe parameter type `L` must be valid for the static lifetime...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m...so that the type `L` will meet its required lifetime bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider adding an explicit lifetime bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    L: BatchLoad\u001b[0m\u001b[0m\u001b[38;5;10m + 'static\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0091, E0310, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0091, E0310, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0091`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0091`.\u001b[0m\n"}
